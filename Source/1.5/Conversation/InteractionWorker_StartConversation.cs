using RimWorld;
using System.Collections.Generic;
using Verse;

namespace Maux36.RimPsyche
{
    public class InteractionWorker_StartConversation : InteractionWorker
    {
        public override float RandomSelectionWeight(Pawn initiator, Pawn recipient)
        {
            if (initiator.compPsyche()?.convoStartedTick > 0)
            {
                Log.Message($"initiator {initiator.Name} already holding a conversation");
                return 0f;
            }
            if (recipient.compPsyche()?.convoStartedTick > 0)
            {
                Log.Message($"recipient {recipient.Name} already holding a conversation");
                return 0f;
            }
            if (!initiator.health.capacities.CapableOf(PawnCapacityDefOf.Talking) || !recipient.health.capacities.CapableOf(PawnCapacityDefOf.Talking))
            {
                return 0f;
            }

            //chance factor should change based on the aspects, relationship, social skills
            float chanceFactor = 100.0f;
            chanceFactor *= 4f;
            return 0.35f * chanceFactor;
        }


        public override void Interacted(Pawn initiator, Pawn recipient, List<RulePackDef> extraSentencePacks, out string letterText, out string letterLabel, out LetterDef letterDef, out LookTargets lookTargets)
        {
            Log.Message($"Interacted called by {initiator.Name} with {recipient.Name}.");
            letterText = null;
            letterLabel = null;
            letterDef = null;
            lookTargets = null;
            //string convoTopic = "RimPsycheTopic";
            var initiatorPsyche = initiator.compPsyche();
            var recipientPsyche = recipient.compPsyche();
            if (initiatorPsyche != null && recipientPsyche != null)
            {
                var convoLength = Rand.Range(250, 625);//25tick == 36sec. || 250tick(6min) ~ 625tick(15min)
                //- > InteractionsTrackerTick() has a chance to turn watnsRandomInteract to true if tick > lastInteractionTime + 320...
                //- > Possibly just set the end to 320 and internally track the whole convo time?

                //- > select convo topic by initiator, and chose interaction time based on the recipient.
                //- > if recipient is not interested: less time, But if explorative: more time.
                //- > Also add the posibility to 'brush off conversation'. In which case, just end it without actually holding it.
                //- > Low opinion pawns are less likely to converse. Tolerant pawns will tolerate thoguh
                //- > also get talk outcome chance.
                //- > Personality core only : general topics.
                //- > Interest/Hobbies : Interests include topics
                //- > What topic is talked about is based on their interests. More social pawns can bring up topics the other might be interested in.
                //- > Topics have 'attitude' that gets generated by vectormulting its weights*facets + social skill level influence.
                //- > based on this attitude, convolength, conversation result varies.
                //- > as a result, facets maybe influenced. (if matterred==true)
                //- > long convo -> high chance of matterred=true
                //- > See if it's too heavy. If it is, truncate the logic until it's light.

                Log.Message($"initiator {initiator.Name} started a conversation with {recipient.Name}");
                if (initiatorPsyche.convoStartedTick < 0) initiatorPsyche.convoStartedTick = Find.TickManager.TicksGame;
                initiatorPsyche.convoPartner = recipient;
                initiatorPsyche.convoCheckTick = Find.TickManager.TicksGame + convoLength;

                if (recipientPsyche.convoStartedTick < 0) recipientPsyche.convoStartedTick = Find.TickManager.TicksGame;
                recipientPsyche.convoPartner = initiator;
            }
        }
    }
}
